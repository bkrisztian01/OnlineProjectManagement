openapi: 3.0.3
info:
  title: Online Project Management
  description: TÃ©malabor
  version: 1.0.0
servers:
  - url: https://opmapi.azurewebsites.net
tags:
  - name: user
    description: User
  - name: project
    description: Project
  - name: task
    description: Tasks
  - name: milestone
    description: Milestone
paths:
  /user/login:
    post:
      tags:
        - user
      summary: Logs in user
      operationId: userLogin
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
        required: true
      responses:
        "200":
          description: Successful login
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessToken"
          headers:
            Set-Cookie:
              schema:
                type: string
                example: jwt=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjE1LCJpYXQiOjE2Njk2NTM0NjUsImV4cCI6MTY2OTczOTg2NX0.h2ZYD_6KfboTmYrvacSXxyndbsO6z2OHqBbpcrzh5EM; Max-Age=86400; Path=/; Expires=Tue, 29 Nov 2022 16:37:45 GMT; HttpOnly; SameSite=None
        "401":
          description: Unauthorized

  /user/signup:
    post:
      tags:
        - user
      summary: Make a new account
      operationId: signup
      requestBody:
        description: Signup
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Signup"
        required: true
      responses:
        "200":
          description: User created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        "409":
          description: Conflict

  /user/logout:
    get:
      tags:
        - user
      summary: User logout
      operationId: logout
      responses:
        "200":
          description: User logged out
        "204":
          description: Refresh token was not found
      security:
        - refreshToken: []

  /users/current:
    get:
      tags:
        - user
      summary: User information
      operationId: whoami
      responses:
        "200":
          description: User information
        "401":
          description: Unauthorized
      security:
        - refreshToken: []
        - accessToken: []

  /users:
    get:
      tags:
        - user
      summary: Get all users
      operationId: getusers
      responses:
        "200":
          description: Users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"

  /refresh:
    get:
      tags:
        - user
      summary: Refresh access token
      operationId: refresh
      responses:
        "200":
          description: Access token
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccessToken"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
      security:
        - refreshToken: []
        - accessToken: []

  /projects:
    get:
      tags:
        - project
      summary: Get all projects connected to user
      operationId: getprojects
      parameters:
        - in: query
          name: pageNumber
          schema:
            type: integer
          description: Which page to return
      responses:
        "200":
          description: Projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Project"
      security:
        - refreshToken: []
        - accessToken: []

    post:
      tags:
        - project
      summary: Get all projects connected to user
      operationId: createproject
      responses:
        "200":
          description: Projects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ProjectEmpty"
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectCreate"
      security:
        - refreshToken: []
        - accessToken: []

  /projects/{projectId}:
    get:
      tags:
        - project
      summary: Get project by id
      operationId: getprojectbyid
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: Projects
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Project"
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
        - refreshToken: []
        - accessToken: []

    put:
      tags:
        - project
      summary: Update project by id
      operationId: updateprojectbyid
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ProjectUpdate"
      responses:
        "200":
          description: Projects
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ProjectEmpty"
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
        - refreshToken: []
        - accessToken: []

    delete:
      tags:
        - project
      summary: Delete project by id
      operationId: deleteprojectbyid
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: OK
      security:
        - refreshToken: []
        - accessToken: []

  /projects/{projectId}/tasks:
    get:
      tags:
        - task
      summary: Get all tasks of a project
      operationId: gettasks
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
        - in: query
          name: pageNumber
          schema:
            type: integer
          description: Which page to return
      responses:
        "200":
          description: Tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        "403":
          description: Forbidden
        "404":
          description: Project was not found
      security:
        - refreshToken: []
        - accessToken: []

    post:
      tags:
        - task
      summary: Create task
      operationId: createtask
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskCreate"
      responses:
        "200":
          description: Task
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Task"
        "403":
          description: Forbidden
        "404":
          description: Project was not found
      security:
        - refreshToken: []
        - accessToken: []

  /projects/{projectId}/tasks/{taskId}:
    get:
      tags:
        - task
      summary: Get task by id
      operationId: gettaskbyid
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
        - in: path
          name: taskId
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: Tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
        - refreshToken: []
        - accessToken: []

    put:
      tags:
        - task
      summary: Update task by id
      operationId: updatetaskbyid
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
        - in: path
          name: taskId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskCreate"
      responses:
        "200":
          description: Task
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Task"
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
        - refreshToken: []
        - accessToken: []

    delete:
      tags:
        - task
      summary: Delete task by id
      operationId: deletetaskbyid
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
        - in: path
          name: taskId
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: OK
      security:
        - refreshToken: []
        - accessToken: []

  /projects/{projectId}/tasks/{taskId}/archive:
    put:
      tags:
        - task
      summary: Archive task by id

      operationId: archivetaskbyid
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
        - in: path
          name: taskId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                archived:
                  type: boolean
                  example: true
      responses:
        "200":
          description: OK
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
        - refreshToken: []
        - accessToken: []

  /projects/{projectId}/tasks/stats:
    get:
      tags:
        - task
      summary: Get stats of tasks
      operationId: gettaskstats
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: Tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  "Not Started":
                    type: integer
                    example: 1
                  "In Progress":
                    type: integer
                    example: 2
                  "Done":
                    type: integer
                    example: 3
                  "Stopped":
                    type: integer
                    example: 0
        "403":
          description: Forbidden
        "404":
          description: Project was not found
      security:
        - refreshToken: []
        - accessToken: []

  /user/tasks:
    get:
      tags:
        - task
        - user
      summary: Get all tasks of a user
      operationId: getusertasks
      responses:
        "200":
          description: Tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TaskUser"
        "403":
          description: Forbidden
        "404":
          description: Project was not found
      security:
        - refreshToken: []
        - accessToken: []

  /projects/{projectId}/milestones:
    get:
      tags:
        - milestone
      summary: Get all milestones of a project
      operationId: getmilestones
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
        - in: query
          name: pageNumber
          schema:
            type: integer
          description: Which page to return
      responses:
        "200":
          description: Milestones
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Milestone"
        "403":
          description: Forbidden
        "404":
          description: Project was not found
      security:
        - refreshToken: []
        - accessToken: []

    post:
      tags:
        - milestone
      summary: Create milestone
      operationId: createmilestone
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MilestoneCreate"
      responses:
        "200":
          description: Milestone
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MilestoneCreated"
        "403":
          description: Forbidden
        "404":
          description: Project was not found
      security:
        - refreshToken: []
        - accessToken: []

  /projects/{projectId}/milestones/{milestoneId}:
    get:
      tags:
        - milestone
      summary: Get milestone by id
      operationId: getmilestonebyid
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
        - in: path
          name: milestoneId
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: Milestone
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Milestone"
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
        - refreshToken: []
        - accessToken: []

    put:
      tags:
        - milestone
      summary: Update milestone by id
      operationId: updatemilestonebyid
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
        - in: path
          name: milestoneId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MilestoneCreate"
      responses:
        "200":
          description: Milestone
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MilestoneCreated"
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
        - refreshToken: []
        - accessToken: []

    delete:
      tags:
        - milestone
      summary: Delete milestone by id
      operationId: deletemilestonebyid
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
        - in: path
          name: milestoneId
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: OK
      security:
        - refreshToken: []
        - accessToken: []

  /projects/{projectId}/tasks/{milestoneId}/archive:
    put:
      tags:
        - milestone
      summary: Archive milestone by id

      operationId: archivemilestonebyid
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
        - in: path
          name: milestoneId
          schema:
            type: integer
          required: true
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                archived:
                  type: boolean
                  example: true
      responses:
        "200":
          description: OK
        "403":
          description: Forbidden
        "404":
          description: Not found
      security:
        - refreshToken: []
        - accessToken: []

  /projects/{projectId}/tasks/{milestoneId}/tasks:
    get:
      tags:
        - milestone
      summary: Get all tasks of a milestone
      operationId: getmilestonetasks
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
        - in: path
          name: milestoneId
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: Tasks
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TaskEmpty"
        "403":
          description: Forbidden
        "404":
          description: Project was not found
      security:
        - refreshToken: []
        - accessToken: []

components:
  schemas:
    Login:
      type: object
      properties:
        username:
          type: string
          example: testuser
        password:
          type: string
          example: test123

    Signup:
      type: object
      properties:
        username:
          type: string
          example: testuser
        password:
          type: string
          example: testuser
        email:
          type: string
          example: testuser@example.com
        fullname:
          type: string
          example: "Test User"

    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        username:
          type: string
          example: testuser
        email:
          type: string
          example: testuser@example.com
        fullname:
          type: string
          example: "Test User"

    AccessToken:
      type: object
      properties:
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOjE1LCJpYXQiOjE2Njk2NTM0NjUsImV4cCI6MTY2OTY1NTI2NX0.lXH2uvPfH7Lt-7LTJAKhN2H88RkSJVT5K2w2fqZXUlw

    ProjectEmpty:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Project #1
        description:
          type: string
          example: "Idk"
        status:
          type: string
          example: "In Progress"
        startDate:
          type: string
          example: "2022-01-01"
        endDate:
          type: string
          example: "2022-02-01"
        estimatedTime:
          type: integer
          example: 14

    ProjectCreate:
      type: object
      properties:
        name:
          type: string
          example: Project #1
        description:
          type: string
          example: "Idk"
        status:
          type: string
          example: "In Progress"
        startDate:
          type: string
          example: "2022-01-01"
        endDate:
          type: string
          example: "2022-02-01"
        estimatedTime:
          type: integer
          example: 14
        managerId:
          type: integer
          example: 1
        memberIds:
          type: array
          items:
            type: integer
            example: 2

    ProjectUpdate:
      type: object
      properties:
        name:
          type: string
          example: Project #1
        description:
          type: string
          example: "Idk"
        status:
          type: string
          example: "In Progress"
        startDate:
          type: string
          example: "2022-01-01"
        endDate:
          type: string
          example: "2022-02-01"
        estimatedTime:
          type: integer
          example: 14

    Project:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Project #1
        description:
          type: string
          example: "Idk"
        status:
          type: string
          example: "In Progress"
        startDate:
          type: string
          example: "2022-01-01"
        endDate:
          type: string
          example: "2022-02-01"
        estimatedTime:
          type: integer
          example: 14
        userRole:
          type: string
          example: Manager
        userRoles:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 1
              role:
                type: string
                example: "Manager"
              user:
                $ref: "#/components/schemas/User"

    TaskEmpty:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Task #1
        description:
          type: string
          example: "Idk"
        status:
          type: string
          example: "Stopped"
        startDate:
          type: string
          example: "2022-01-01"
        deadline:
          type: string
          example: "2022-02-01"
        archived:
          type: boolean
          example: 14

    TaskCreate:
      type: object
      properties:
        name:
          type: string
          example: Task #1
        description:
          type: string
          example: "Idk"
        status:
          type: string
          example: "Stopped"
        startDate:
          type: string
          example: "2022-01-01"
        deadline:
          type: string
          example: "2022-02-01"
        assigneeIds:
          type: array
          items:
            type: integer
            example: 2
        prerequisiteTaskIds:
          type: array
          items:
            type: integer
            example: 2

    Task:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Task #1
        description:
          type: string
          example: "Idk"
        status:
          type: string
          example: "Stopped"
        startDate:
          type: string
          example: "2022-01-01"
        deadline:
          type: string
          example: "2022-02-01"
        archived:
          type: boolean
          example: false
        assignees:
          type: array
          items:
            $ref: "#/components/schemas/User"
        prerequisiteTasks:
          type: array
          items:
            $ref: "#/components/schemas/TaskEmpty"
        milestone:
          $ref: "#/components/schemas/MilestoneEmpty"

    TaskUser:
      allOf:
        - $ref: "#/components/schemas/TaskEmpty"
        - type: object
          properties:
            project:
              $ref: "#/components/schemas/ProjectEmpty"

    MilestoneEmpty:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Task #1
        description:
          type: string
          example: "Idk"
        deadline:
          type: string
          example: "2022-02-01"
        status:
          type: string
          example: "Stopped"
        archived:
          type: boolean
          example: true

    Milestone:
      allOf:
        - $ref: "#/components/schemas/MilestoneEmpty"
        - type: object
          properties:
            tasks:
              type: array
              items:
                $ref: "#/components/schemas/TaskEmpty"

    MilestoneCreate:
      type: object
      properties:
        name:
          type: string
          example: Task #1
        description:
          type: string
          example: "Idk"
        deadline:
          type: string
          example: "2022-02-01"
        status:
          type: string
          example: "Stopped"
        taskIds:
          type: array
          items:
            type: integer
            example: 1

    MilestoneCreated:
      allOf:
        - $ref: "#/components/schemas/Milestone"
        - type: object
          properties:
            project:
              $ref: "#/components/schemas/ProjectEmpty"

  securitySchemes:
    accessToken:
      type: apiKey
      name: Authorization
      in: header
    refreshToken:
      type: apiKey
      name: jwt
      in: cookie
