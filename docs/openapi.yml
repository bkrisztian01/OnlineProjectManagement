openapi: 3.0.3
info:
  title: Online Project Management
  description: TÃ©malabor
  version: 1.0.0
  
tags:
  - name: user
    description: Operations about user
  - name: project
    description: Project dashboard
  - name: task
    description: Tasks
  - name: milestone
    description: Milestone
    
paths:
  /login:
    post:
      tags:
        - user
      summary: Logs in user
      operationId: userLogin
      parameters:
        - name: username
          in: query
          description: The username for login
          required: false
          schema:
            type: string
        - name: password
          in: query
          description: The password for login in clear text
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful login
        '401':
          description: Invalid credentials
          
  /signup:
    post:
      tags:
        - user
      summary: Make a new account
      operationId: signup
      requestBody:
        description: Signup
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Signup'
          application/xml:
            schema:
              $ref: '#/components/schemas/Signup'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Signup'
        required: true
      responses:
        '201':
          description: User created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Signup'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Signup'
        '409':
          description: User already exists
          
  /logout:
    get:
      tags:
        - user
      summary: Logs out current logged in user session
      description: ''
      operationId: logoutUser
      responses:
        default:
          description: Successful operation
          
  /project:
    get:
      tags:
        - project
      summary: Project dashboard
      operationId: listproject
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Projects'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Projects'
                
  /project/new:
    post:
      tags:
        - project
      summary: Make a new project
      operationId: makeProject
      parameters:
        - name: name
          in: query
          description: Name of project
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Project'
      security:
        - api_key: []
        # TODO
                
  /project/{projectId}:
    get:
      tags:
        - project
      summary: Project view
      operationId: getProjectById
      parameters:
        - $ref: "#/components/parameters/projectId"
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Project'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Project'
        '400':
          description: Invalid ID supplied
        '404':
          description: Project not found
      security:
        - api_key: []
        # TODO
    post:
      tags:
        - project
      summary: Update project
      operationId: updateProject
      parameters:
        - $ref: "#/components/parameters/projectId"
        - name: name
          in: query
          description: Name of project that needs to be updated
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid project value
      security:
        - api_key: []
        # TODO
    delete:
      tags:
        - project
      summary: Delete project
      operationId: deleteProject
      parameters:
        - $ref: "#/components/parameters/projectId"
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid task value
      security:
        - api_key: []
        # TODO
          
  /project/task/new:
    post:
      tags:
        - task
      summary: Make a new task
      operationId: makeTask
      parameters:
        - name: name
          in: query
          description: Name of task
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/projectId"
        - name: description
          in: query
          description: Description of task
          schema:
            type: string
        - name: deadline
          in: query
          description: Deadline of task
          schema:
            type: string
        - name: assigneesIds
          in: query
          description: IDs of assignees for task
          schema:
            type: array
            items:
              type: integer
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
      security:
        - api_key: []
        # TODO
                
  /project/task/{taskId}:
    get:
      tags:
        - task
      summary: Task view
      operationId: getTaskById
      parameters:
        - $ref: "#/components/parameters/taskId"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Task'
        '400':
          description: Invalid ID supplied
        '404':
          description: Task not found
      security:
        - api_key: []
        # TODO
    post:
      tags: 
        - task
      summary: Update task
      operationId: updateTask
      parameters:
        - $ref: "#/components/parameters/taskId"
        - name: name
          in: query
          description: Name of task that needs to be updated
          schema:
            type: string
        - name: description
          in: query
          description: Description of task that needs to be updated
          schema:
            type: string
        - name: status
          in: query
          description: Status of task that needs to be updated
          schema:
            type: string
        - name: deadline
          in: query
          description: Deadline of task that needs to be updated
          schema:
            type: string
        - name: prerequisiteTasksId
          in: query
          description: IDs of prerequisite tasks that needs to be updated
          schema:
            type: array
            items:
              type: integer
        - name: milestoneId
          in: query
          description: Milestone of task that needs to be updated
          schema:
            type: integer
      responses:
        '200':
          description: Successful operation
        '405':
          description: Invalid input
      security:
        - api_key: []
        # TODO
    delete:
      tags:
        - task
      summary: Delete task
      operationId: deleteTask
      parameters:
        - $ref: '#/components/parameters/taskId'
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid task value
      security:
        - api_key: []
        
  /project/milestone/new:
    post:
      tags:
        - milestone
      summary: Make a new milestone
      operationId: makeMilestone
      parameters:
        - name: name
          in: query
          description: Name of task
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/projectId"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Milestone'
            application/xml:
              schema:
                $ref: '#/components/schemas/Milestone'
        
  /project/milestone/{milestoneId}:
    get:
      tags:
        - milestone
      summary: Milestone view
      operationId: getMilestoneById
      parameters:
        - $ref: "#/components/parameters/milestoneId"
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Milestone'          
            application/xml:
              schema:
                $ref: '#/components/schemas/Milestone'
        '400':
          description: Invalid ID supplied
        '404':
          description: Milestone not found
      security:
        - api_key: []
        # TODO
    post:
      tags:
        - milestone
      summary: Update milestone
      operationId: updateMilestone
      parameters:
        - $ref: "#/components/parameters/milestoneId"
        - name: name
          in: query
          description: Name of task that needs to be updated
          schema:
            type: string
        - name: taskIds
          in: query
          description: Tasks of milestone that needs to be updated
          schema:
            type: array
            items:
              type: integer
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid task value
      security:
        - api_key: []
    delete:
      tags:
        - milestone
      summary: Delete milestone
      operationId: deleteMilestone
      parameters:
        - $ref: "#/components/parameters/milestoneId"
      responses:
        '200':
          description: Successful operation
        '400':
          description: Invalid task value
      security:
        - api_key: []
          
          
components:
  schemas:
    Signup:
      type: object
      properties:
        fullname:
          type: string
          example: "Teszt Elek"
        username:
          type: string
          example: testuser
        email:
          type: string
          example: testuser@example.com
        password:
          type: string
          example: password1
      xml:
        name: signup
        
    Task:
      type: object
      properties:
        id:
          type: integer
          example: 10298
        name:
          type: string
          example: "Task #1"
        description:
          type: string
        status:
          type: string
          example: "In progress"
        deadline:
          type: string
          example: "2022.10.10."
        assigneesId:
          type: array
          items:
            type: integer
        projectId:
          type: integer
          example: 123098123
        prerequisiteTasksId:
          type: array
          items:
            type: integer
            example: 21284212
        milestoneId:
          type: integer
          example: 123451
        
    Project:
      type: object
      properties:
        id:
          type: integer
          example: 91283
        name:
          type: string
          example: "Project #1"
        tasks:
          type: "array"
          items:
            $ref: "#/components/schemas/Task"
        
    Projects:
      type: array
      items:
         $ref: "#/components/schemas/Project"
         
    Milestone:
      type: object
      properties:
        id:
          type: integer
          example: 91283
        name:
          type: string
          example: "Milestone #1"
        status:
          type: string
          example: "In progress"
        projectId:
          type: integer
          example: 12389

  parameters:
    taskId:
      name: taskId
      in: path
      description: ID of task
      required: true
      schema:
        type: integer
        format: int64
    
    projectId:
      name: projectId
      in: path
      description: ID of project
      required: true
      schema:
        type: integer
        format: int64
        
    milestoneId:
      name: milestoneId
      in: path
      description: ID of milestone
      required: true
      schema:
        type: integer
        format: int64

  requestBodies:
    Signup:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Signup'
        application/xml:
          schema:
            $ref: '#/components/schemas/Signup'
    
  securitySchemes:
    api_key:
      type: apiKey
      name: api_key
      in: header